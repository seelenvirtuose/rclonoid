#!/bin/bash

me="rclonoid"

main() {
  parse_and_check_arguments "$@"
  case "$command" in
    single) replicate_single_filesystem ;;
    all) replicate_all_filesystems ;;
  esac
}

## Replicates the defined source file system to the defined target remote.
## Source and target are already parsed from the CLI arguments that were passed to this script.
##
## Note that only mounted file systems will be replicated.
replicate_single_filesystem() {
  echo "Replicating ZFS file system \"$source\" to rclone destination \"$target\" ..."
  echo
  replicate "$source"
  echo
  echo "Finished replicating ZFS file system \"$source\" to rclone destination \"$target\"."
}

## Replicates all file systems to the defined target remote.
## The target is already parsed from the CLI arguments that were passed to this script.
##
## Note that only mounted file systems will be replicated.
replicate_all_filesystems() {
  echo "Replicating all ZFS file systems to rclone destination \"$target\" ..."
  echo
  echo "Determining all ZFS file systems ..."
  declare fs_list
  if ! fs_list=$(set -x; zfs list -H -o name -t fs -r)
  then
    echo "Error while trying to determine all ZFS file systems."; return 1
  fi
  echo "Successfully determined all ZFS file systems. Sic:"
  echo "$fs_list"
  echo
  echo "Iterating over all determined ZFS file systems ..."
  for fs in $fs_list
  do
    echo
    replicate "$fs"
  done
  echo
  echo "Finished iterating over all determined ZFS file systems."
  echo
  echo "Finished replicating all ZFS file systems to rclone destination \"$target\"."
}

## Replicates the specified file system to the defined target.
## The target is already parsed from the CLI arguments that were passed to this script.
##
## This function first checks eligibility of the specified file system.
## Then a snapshot will be created, the file system gets synced, and then the snapshot will be destroyed.
##
## Arguments:
##   $1   file system to be replicated
replicate() {
  echo "Replicating ZFS file system \"$1\" ..."
  if ! is_filesystem_mounted "$1"
  then
    echo "ZFS file system \"$1\" will be ignored. Either it is not mounted or the mounted option could not be retrieved.";
  else
    declare snapshot_name
    snapshot_name="${me}_$(date +%Y%m%dT%H%M%S)"
    if create_snapshot "$1" "$snapshot_name"
    then
      sync "$1" "$snapshot_name"
      destroy_snapshot "$1" "$snapshot_name"
    fi
  fi
  echo "Finished replicating ZFS file system \"$1\"."
}

## Checks whether the specified file system is actually mounted.
##
## Arguments:
##   $1   file system to check
##
## Returns:
##   0   if `zfs` could be called successfully and file system is actually mounted
##   1   otherwise
is_filesystem_mounted() {
  declare zfs_opt_mounted
  if ! zfs_opt_mounted=$(set -x; zfs get -H -o value mounted "$1")
  then
    echo "Error while trying to get the ZFS option \"mounted\"."; return 1
  fi
  test "$zfs_opt_mounted" = "yes"
}

## Creates the ZFS snapshot.
##
## Arguments:
##   $1   file system for which the snapshot shall be created
##   $2   snapshot name
##
## Returns:
##   0   if `zfs` could be called successfully
##   1   otherwise
create_snapshot() {
  echo "Creating snapshot ..."
  if ! (set -x; zfs snapshot "${1}@${2}")
  then
    echo "Error while trying to create snapshot."; return 1
  fi
  echo "Snapshot successfully created."
}

## Syncs the specified snapshot of the specified file system to the defined target.
## The target is already parsed from the CLI arguments that were passed to this script.
## This function expects the snapshot to be already created.
##
## Arguments:
##   $1   file system to be synced
##   $2   snapshot name
##s
## Returns:
##   0   if `zfs` and `rclone` could be called successfully
##   1   otherwise
sync() {
  echo "Syncing ..."
  declare mountpoint
  if ! mountpoint=$(set -x; zfs get -H -o value mountpoint "$1")
  then
    echo "Error while trying to get the ZFS option \"mountpoint\"."; return 1
  fi
  if ! (set -x; rclone sync $options "$mountpoint/.zfs/snapshot/$2" "$target/$1")
  then
    echo "Error while trying to \"rclone sync\"."; return 1
  fi
  echo "Successfully synced."
}

## Destroys the ZFS snapshot.
##
## Arguments:
##   $1   file system for which the snapshot shall be destroyed
##   $2   snapshot name
##
## Returns:
##   0   if `zfs` could be called successfully
##   1   otherwise
destroy_snapshot() {
  echo "Destroying snapshot ..."
  if ! (set -x; zfs destroy "${1}@${2}")
  then
    echo "Error while trying to destroy snapshot."; return 1
  fi
  echo "Snapshot successfully destroyed."
}

## Parses and checks the given arguments according to the documented usage.
## If the arguments are invalid, usage is printed and this script exits.
##
## Arguments:
##   $*   all command line arguments to this script
##
## Sets global variables:
##   command   command to use
##   source    source zfs file system (if applicable)
##   target    target rclone remote
##   options   any further arguments that are options for the rclone command
parse_and_check_arguments() {
  if [ -z "$*" ] || [ "$1" = "help" ]; then print_usage_and_exit 0; fi

  command="$1"
  shift
  case "$command" in
    single|all) ;;
    *) usage_error "Error: Unknown command \"$command\"." ;;
  esac

  if [ "$command" = "single" ]
  then
    source="$1"
    shift
    if [ -z "$source" ]; then usage_error "Error: No source provided."; fi
  fi

  target="$1"
  shift
  if [ -z "$target" ]; then usage_error "Error: No target provided."; fi

  options="$*"
}

## Prints the specified error message, then prints the usage, and then exits with exit code 2.
##
## Arguments:
##   $@   all message lines to be printed
usage_error() {
  for line in "$@"; do echo "$line"; done
  echo
  print_usage_and_exit 2
}

## Prints the usage, and then exits with the specified exit code.
##
## Arguments:
##   $1   exit code
print_usage_and_exit() {
  echo "Usage:"
  echo "  $me single <SOURCE> <TARGET> [<OPTIONS>]"
  echo "  $me all <TARGET> [<OPTIONS>]"
  echo
  echo "Replicates one or more ZFS file systems via \"rclone sync\" to the specified"
  echo "target."
  echo
  echo "  SOURCE    Identifies the single ZFS file system to be replicated."
  echo
  echo "  TARGET    Identifies an rclone remote. Note that rclone remotes require a"
  echo "            trailing colon. A destination path may also be appended."
  echo
  echo "  OPTIONS   Any further argument is considered an option that will be passed"
  echo "            unmodified to the rclone command."
  echo
  echo "Obviously, rclone must be installed and configured. Especially, the specified"
  echo "target rclone remote must be configured and reachable."
  echo
  echo "ZFS file systems must be mounted so that they can be replicated. Otherwise they"
  echo "are simply ignored. Technically, $me first creates a snapshot, then syncs"
  echo "all content of the snapshot directory to the target. If a ZFS file system is"
  echo "not mounted, then there is no snapshot directory, and thus it can't be synced."
  echo
  echo "The name of the replicated ZFS file system will also be the root directory of"
  echo "all replicated files. E.g. replicating the source ZFS file system \"tank/data\""
  echo "to the target rclone remote \"backup:/somedir\" will actually sync all files to"
  echo "\"backup:/somedir/tank/data\"."
  echo
  echo "Examples:"
  echo "  $me all backup:"
  echo "  $me all backup:/all"
  echo "  $me all backup:/all --create-empty-src-dirs"
  echo "  $me single pool/data backup:/single"
  exit "$1"
}

main "$@"